{"version":3,"sources":["Components/Header.js","Components/GameBoardTile.js","Components/Ship.js","Components/GameBoard.js","Components/GameController.js","App.js","index.js"],"names":["Header","id","className","GameBoardTile","props","gameStart","player","coord","winner","useState","tileStatus","setTileStatus","useEffect","shipTileStatus","miss","hit","onClick","receiveAttack","onDragOver","onDrop","data-coord-x","x","data-coord-y","y","Ship","shipSize","shipUnits","setShipUnits","rotate","setRotate","tempShipUnits","i","push","data-unit","uniqid","generateShipUnits","isSunk","draggable","e","target","parentNode","style","transform","handleClick","onDragStart","shipUnitIndex","section","getBoundingClientRect","width","posX","clientX","left","Math","ceil","height","posY","clientY","top","shipData","orientation","dataTransfer","setData","JSON","stringify","drag","GameBoard","boardSize","shipSizeArray","shipOnBoard","shipCoordsArray","boardAttackCoords","shipSunk","currPlayerTurn","boardArray","setBoardArray","shipList","setShipList","generateShips","tempShipList","map","addShipOnBoard","indexOf","placeCompShip","size","tempShipCoordsArray","coordsArray","shipCoords","valid","index","floor","random","randX","randY","ship","forEach","length","filter","shipCoord","addShipCoordsArray","drop","coords","getAttribute","preventDefault","data","Number","placeShip","parse","getData","dragOver","result","j","attackCoord","generateBoard","tempBoard","addBoardAttackCoords","coordx","coordy","computerAttack","updateShips","checkWin","findIndex","checkSink","updateShipCoordsArray","checkHit","updateTurn","placeCompShips","charAt","toUpperCase","slice","GameController","setShipOnBoard","setShipCoordsArray","compShipOnBoard","setCompShipOnBoard","compShipCoordsArray","setCompShipCoordsArray","setBoardAttackCoords","compBoardAttackCoords","setCompBoardAttackCoords","setShipSunk","compShipSunk","setCompShipSunk","setGameStart","setCurrPlayerTurn","status","setStatus","gameWin","setGameWin","setWinner","newGame","hitCount","prevBoardAttackCoords","prevCompBoardAttackCoords","prevShipCoordsArray","prevCompShipCoordsArray","prevShipOnBoard","disabled","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7481c333.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n    return (\n        <div id='header'>\n            <div id='headerContainer'>\n                <span className=\"material-icons\">\n                    directions_boat_filled\n                </span>\n                <div id='headerTitle'>Battleship!</div>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;","import React, {useState,useEffect} from 'react';\n\nconst GameBoardTile = (props) => {\n\n    const {gameStart, player, coord, winner} = props;\n    const [tileStatus, setTileStatus] = useState('empty');\n   \n    const handleClick = () => {\n        if (gameStart && player==='computer' && !winner){\n            props.receiveAttack(coord);\n        }\n    }\n\n    const updateTileStatus = () => {\n        // checks if ship exists on this tile (From shipCoordsArray)\n        if (props.shipTileStatus[0]){\n            if (props.shipTileStatus[0].miss){\n                setTileStatus('miss');\n            } else {\n                setTileStatus((props.shipTileStatus[0].hit ? 'shipHit':'hasShip'));\n            }\n        } \n\n    }\n\n    useEffect(()=>{\n        updateTileStatus();\n    },[props.shipTileStatus]);\n\n    return (\n        <div \n            className={`gameBoardTile ${tileStatus}`} \n            onClick={(winner?null:handleClick)}\n            onDragOver={props.onDragOver}\n            onDrop={props.onDrop}\n            data-coord-x={props.coord.x}\n            data-coord-y={props.coord.y}\n        >\n        </div>\n    )\n}\n\nexport default GameBoardTile;","import React, {useState,useEffect} from 'react';\nimport uniqid from 'uniqid';\n\nconst Ship = (props) => {\n\n    const {shipSize, player, id} = props;\n    const [shipUnits, setShipUnits] = useState([]);\n    const [rotate, setRotate] = useState(false);\n\n    const generateShipUnits = () =>{\n        let tempShipUnits=[];\n        for (let i=1;i<=shipSize;i++){\n            tempShipUnits.push(<div className='shipUnit' data-unit={i} key={uniqid()}></div>);\n        }\n        setShipUnits(tempShipUnits);\n    }\n\n    const handleClick = (e) =>{\n        // rotate \n        if (!rotate && player==='human'){\n            e.target.parentNode.style.transform='rotate(90deg)';\n        } else {\n            e.target.parentNode.style.transform='';\n        }\n        setRotate(!rotate);\n    }\n\n    const drag = (e) => {\n        let shipUnitIndex=0;\n        if (rotate){\n            // horizontal\n            let section = e.target.getBoundingClientRect().width/shipSize;\n            let posX = (e.clientX - e.target.getBoundingClientRect().left)/section;\n            shipUnitIndex = Math.ceil(posX);\n        } else{\n            // vertical\n            let section = e.target.getBoundingClientRect().height/shipSize;\n            let posY = (e.clientY - e.target.getBoundingClientRect().top)/section;\n            shipUnitIndex = Math.ceil(posY);\n        }\n        // if rotate true then horizontal, false then vertical\n        const orientation = (rotate ? 'horizontal': 'vertical');\n        const shipData = {\n            shipSize,\n            orientation,\n            shipUnitIndex,\n            id\n        }\n        e.dataTransfer.setData('shipData',JSON.stringify(shipData));\n    }\n\n    useEffect(()=>{\n        generateShipUnits();\n    },[]);\n\n    return (\n        <div \n            // className={`ship ${props.isSunk}`}\n            className={`ship ${props.isSunk ? 'sunk':''}`}\n            // draggable='true'\n            draggable={props.draggable}\n            onClick={(e)=>handleClick(e)}\n            onDragStart={(e)=>drag(e)}\n            id={id}\n        >\n            {shipUnits}\n        </div>\n    )\n}\n\nexport default Ship;","import React, {useState,useEffect} from 'react';\nimport uniqid from 'uniqid';\nimport GameBoardTile from './GameBoardTile';\nimport Ship from './Ship';\n\nconst GameBoard = (props) => {\n\n    const {boardSize, player, shipSizeArray, shipOnBoard, gameStart, shipCoordsArray, boardAttackCoords, shipSunk, winner, currPlayerTurn} = props;\n    const [boardArray, setBoardArray] = useState([]);\n    const [shipList, setShipList] = useState([]);\n    // const [shipCoordsArray, setShipCoordsArray] = useState([]);\n    // const [shipOnBoard, setShipOnBoard] = useState([]);\n\n    const generateShips = () => {\n        let tempShipList = [];\n        tempShipList = shipSizeArray.map((shipSize)=>{\n            let id = uniqid();\n            if (player==='computer'){\n                props.addShipOnBoard(player, id);\n            }\n            return (<Ship \n                        shipSize={shipSize}\n                        player={player}\n                        key={uniqid()}\n                        id={id}\n                        draggable={(shipOnBoard.indexOf(id)===-1 && player==='human'? 'true':'false')}\n                        isSunk = {isSunk(id)}\n                    />)\n        });\n        setShipList(tempShipList);\n    }\n\n    const updateShips = () => {\n        let tempShipList = [];\n        tempShipList = shipSizeArray.map((shipSize, i)=>{\n            return (<Ship\n                        shipSize={shipSize}\n                        player={player}\n                        key={uniqid()}\n                        id={shipOnBoard[i]}\n                        draggable={(shipOnBoard.indexOf(shipOnBoard[i])===-1 && player==='human'? 'true':'false')}\n                        isSunk = {isSunk(shipOnBoard[i])}\n                    />)\n        });\n        setShipList(tempShipList);\n    }\n\n    const isSunk = (id) => {\n        return (shipSunk.indexOf(id)===-1 ? false : true);\n    }\n\n    const placeShip = (data, coords) => {\n        let coordsArray = [];\n        let shipCoords = {};\n        let valid = true;\n        let result = '';\n        const orientation = data.orientation;\n        const index = data.shipUnitIndex;\n        const size = data.shipSize;\n        const id = data.id;\n        if (shipOnBoard.indexOf(id)!==-1 || player==='computer'){\n            // already on board or computer\n            return;\n        }\n        for (let i=1;i<=size;i++){\n            let coordX = (orientation==='vertical' ? Number(coords.x) : Number(coords.x)-(index-i) );\n            let coordY = (orientation==='horizontal' ? Number(coords.y) : Number(coords.y)-(index-i));\n            shipCoords = {x: coordX, y: coordY, ship: id, hit: false};\n            coordsArray.push(shipCoords);\n        }\n        coordsArray.forEach((coord)=>{\n            // still need to check if board array already contains tile with ship, or if board contains same ship\n            if (coord.x <0 || coord.x > 9 || coord.y < 0 || coord.y > 9){\n                valid=false;\n            };\n            for (let i=0;i<shipCoordsArray.length;i++){\n                result = shipCoordsArray[i].filter(shipCoord=>{\n                    return shipCoord.x === coord.x && shipCoord.y === coord.y;\n                });\n                if (result.length>0){\n                    valid=false;\n                    return;\n                }\n            }\n        });\n        if (valid) {\n            props.addShipCoordsArray(player,coordsArray);\n            props.addShipOnBoard(player,id);\n        }\n    }\n\n    const placeCompShip = (id, size, tempShipCoordsArray) => {\n        let coordsArray = [];\n        let shipCoords = {};\n        let valid = true;\n        let result = '';\n        let index = (Math.floor(Math.random()*size)+1);\n        const orientation = (Math.floor(Math.random()*2) ? 'horizontal' : 'vertical');\n        const randX = Math.floor(Math.random()*10);\n        const randY = Math.floor(Math.random()*10);\n        // need to randomize coordinates\n        for (let i=1;i<=size;i++){\n            let coordX = (orientation==='vertical' ? randX : randX-(index-i) );\n            let coordY = (orientation==='horizontal' ? randY : randY-(index-i));\n            shipCoords = {x: coordX, y: coordY, ship: id, hit: false};\n            coordsArray.push(shipCoords);\n        }\n        coordsArray.forEach((coord)=>{\n           if (coord.x <0 || coord.x > 9 || coord.y < 0 || coord.y > 9){\n               valid=false;\n           } \n           // need temporary array\n           for (let i=0;i<tempShipCoordsArray.length;i++){\n                result = tempShipCoordsArray[i].filter(shipCoord=>{\n                    return shipCoord.x === coord.x && shipCoord.y === coord.y;\n                });\n                if (result.length>0){\n                    valid=false;\n                    return;\n                }\n            }\n        });\n        if (valid) {\n            // tempShipCoordsArray = [...tempShipCoordsArray,coordsArray];\n            tempShipCoordsArray.push(coordsArray);\n            props.addShipCoordsArray(player,coordsArray);\n        }\n        return valid;\n    }\n\n    const placeCompShips = () => {\n        let tempShipCoordsArray = [];\n        for (let i=0;i<shipOnBoard.length;i++){\n            let valid=true;\n            do{\n                valid=placeCompShip(shipOnBoard[i], shipSizeArray[i], tempShipCoordsArray);\n            } while (!valid);\n        }\n    }\n\n    const drop = (e) =>{\n        let coords = {x:e.target.getAttribute('data-coord-x'),y:e.target.getAttribute('data-coord-y')};\n        e.preventDefault();\n        let data = JSON.parse(e.dataTransfer.getData('shipData'));\n        placeShip(data, coords);\n    }\n\n    const dragOver = (e) => {\n        e.preventDefault();\n    }\n\n    const shipTileStatus = (coord) => {\n        let result = '';\n        for (let i=0;i<shipCoordsArray.length;i++){\n            result = shipCoordsArray[i].filter(shipCoord=>{\n                return shipCoord.x === coord.j && shipCoord.y === coord.i;\n            }); \n            if (result.length>0){return result;}\n        }\n        for (let i=0;i<boardAttackCoords.length;i++){;\n            result = boardAttackCoords.filter(attackCoord=>{\n                return attackCoord.x === coord.j && attackCoord.y === coord.i;\n            });\n            if (result.length>0){\n                result[0].miss=true;\n                return result;\n            }\n        }\n        return result;\n    }\n\n    const generateBoard = () => {\n        let tempBoard = [];\n        for (let i=0;i<boardSize;i++){\n            for (let j=0;j<boardSize;j++){\n                tempBoard.push(\n                    <GameBoardTile \n                        key={uniqid()}\n                        coord={{x:j,y:i}}\n                        player={player}\n                        onDragOver={(e)=>dragOver(e)}\n                        onDrop={(e)=>drop(e)}\n                        shipTileStatus={shipTileStatus({j,i})}\n                        gameStart={gameStart}\n                        receiveAttack={receiveAttack}\n                        winner={winner}\n                        // need hasShip and hit property\n                    />\n                )\n            }\n        }\n        setBoardArray(tempBoard);\n    }\n\n    const checkHit = () => {\n        // check last added attack coord\n        let tempShipCoordsArray=[...shipCoordsArray];\n        let attackCoord = boardAttackCoords[boardAttackCoords.length-1];\n        for (let i=0; i<tempShipCoordsArray.length;i++){\n            let index = tempShipCoordsArray[i].findIndex(\n                shipCoord=>shipCoord.x === attackCoord.x && shipCoord.y === attackCoord.y);\n            if (index!==-1){\n                // if hit, set hit and check if ship is sunk\n                tempShipCoordsArray[i][index].hit = true;\n                props.checkSink(player, tempShipCoordsArray[i][index].ship);\n            }\n        }\n        props.updateShipCoordsArray(player, tempShipCoordsArray);\n    }\n\n    const receiveAttack = (coord) => {\n        // check if already clicked\n        let result = '';\n        // prevents duplicate clicks\n        for (let i=0;i<boardAttackCoords.length;i++){\n            result = boardAttackCoords.filter(attackCoord=>{\n                return attackCoord.x === coord.x && attackCoord.y === coord.y;\n            });\n            // return result prevents updating boardAttackCoords and re-rendering\n            if (result.length>0){return result;}\n        }\n        // add attack to boardAttackCoords\n        props.addBoardAttackCoords(player, coord);\n    }\n\n    const computerAttack = () => {\n        let result = '';\n        do{\n            let coordx = Math.floor(Math.random()*10);\n            let coordy = Math.floor(Math.random()*10);\n            let coord = {x: coordx, y: coordy}\n            result = receiveAttack(coord);\n        } while (result);\n    }\n\n    useEffect(()=>{\n        // if board is humans and currPlayerTurn is computer, make computer attack\n        if (player==='human' && currPlayerTurn==='computer' && !winner && gameStart){\n            computerAttack();\n        }\n    },[currPlayerTurn]);\n\n    useEffect(()=>{\n        if (gameStart){\n            updateShips();\n            props.checkWin(player);\n        } else {\n            generateShips();\n        }\n    },[shipSunk]);\n\n    useEffect(()=>{\n        if (gameStart){\n            // check for hit / miss, check for sink ship,  update board\n            checkHit();\n            // check for win\n            props.updateTurn();\n            // call for computer attack, then check for sunk ship, win\n        }\n    },[boardAttackCoords]);\n\n    useEffect(()=>{\n        // update boardArray\n        generateBoard();\n    },[shipCoordsArray]);\n\n    useEffect(()=>{\n        if (gameStart && player==='computer'){\n            // place the 5 ships randomly, put into shipCoordsArray\n            placeCompShips();\n        }\n    },[gameStart]);\n\n    useEffect(()=>{\n        // initialize board\n        generateBoard();\n        generateShips();\n    },[]);\n\n    return (\n        <div className='gameBoardWrapper'>\n            <div className='gameBoardTitle'>{player.charAt(0).toUpperCase()+player.slice(1)}'s Board</div>\n            <div className='gameBoardContainer' id={`${player}GameBoard`}>\n                {boardArray}\n            </div>\n            <div className='shipContainer'>\n                {shipList}\n            </div>\n        </div>\n    )\n}\n\nexport default GameBoard;","import React, {useState,useEffect} from 'react';\nimport GameBoard from './GameBoard';\n\nconst GameController = () => {\n    const [boardSize, setBoardSize] = useState(10);\n    const [shipSizeArray, setShipSizeArray] = useState([5,4,3,3,2]);\n    const [shipOnBoard, setShipOnBoard] = useState([]);\n    const [shipCoordsArray, setShipCoordsArray] = useState([]);\n    const [compShipOnBoard, setCompShipOnBoard] = useState([]);\n    const [compShipCoordsArray, setCompShipCoordsArray] = useState([]);\n    const [boardAttackCoords, setBoardAttackCoords] = useState([]);\n    const [compBoardAttackCoords, setCompBoardAttackCoords] = useState([]);\n    const [shipSunk, setShipSunk] = useState([]);\n    const [compShipSunk, setCompShipSunk] = useState([]);\n    const [gameStart, setGameStart] = useState(false);\n    const [currPlayerTurn, setCurrPlayerTurn] = useState('human');\n    const [status, setStatus] = useState('Place Ships');\n    const [gameWin, setGameWin] = useState();\n    const [winner, setWinner] = useState();\n\n    useEffect(()=>{\n        if (winner){\n            newGame();\n        }\n    },[winner]);\n\n    const newGame = () => {\n        setShipOnBoard([]);\n        setShipCoordsArray([]);\n        setCompShipOnBoard([]);\n        setCompShipCoordsArray([]);\n        setBoardAttackCoords([]);\n        setCompBoardAttackCoords([]);\n        setShipSunk([]);\n        setCompShipSunk([]);\n        setGameStart(false);\n        setCurrPlayerTurn('human');\n        setWinner();\n        // issue on replaying game: ids are gone from ships\n    }\n\n    const updateStatus = () => {\n        // if (gameStart && winner) {\n        //     setStatus(`${winner} wins!`);\n        // } else if (gameStart) {\n        //     setStatus('Attack!');\n        // } else {\n        //     setStatus('Place Ships');\n        // }\n        if (gameStart && winner) {\n            setGameWin(`${winner.charAt(0).toUpperCase()+winner.slice(1)} wins!`);\n        } else if (gameStart){\n            setStatus('Attack!');\n            setGameWin();\n        } else {\n            setStatus('Place Ships');\n        }\n    }\n\n    const updateTurn = () => {\n        (currPlayerTurn === 'human' ? setCurrPlayerTurn('computer') : setCurrPlayerTurn('human'));\n    }\n\n    // check win here\n\n    const checkWin = (player) => {\n        // player is the person that just got attacked\n        if ((player==='human'?shipSunk:compShipSunk).length>=shipSizeArray.length){\n            setWinner((player==='human'?'computer':'human'));\n        }\n    }\n\n    const checkSink = (player, id) => {\n        for (let i=0; i<(player==='human'?shipCoordsArray:compShipCoordsArray).length;i++){\n            let result = (player==='human'?shipCoordsArray:compShipCoordsArray)[i].filter(shipCoord=>{\n                return shipCoord.ship === id;\n            });\n            if (result.length>0){\n                let shipSize = result.length;\n                let hitCount = 0;\n                result.forEach(coord=>{\n                    if (coord.hit===true){hitCount++;};\n                });\n                if (hitCount===shipSize){\n                    (player==='human' ? setShipSunk([...shipSunk,id]) : setCompShipSunk([...compShipSunk,id]));\n                }\n                return;\n            }\n        }\n    }\n\n    const addBoardAttackCoords = (player, coord) => {\n        if (player==='human'){\n            setBoardAttackCoords(prevBoardAttackCoords=>{\n                return [...prevBoardAttackCoords, coord];\n            });\n        } else {\n            setCompBoardAttackCoords(prevCompBoardAttackCoords=>{\n                return [...prevCompBoardAttackCoords, coord];\n            });\n        }\n    }\n\n    const updateShipCoordsArray = (player, coordsArray) => {\n        if (player==='human'){\n            setShipCoordsArray(coordsArray);\n        } else {\n            setCompShipCoordsArray(coordsArray);\n        }\n    }\n\n    const addShipCoordsArray = (player,coordsArray) => {\n        if (player==='human'){\n            setShipCoordsArray(prevShipCoordsArray => {\n                return [...prevShipCoordsArray, coordsArray];\n            }); \n        } else {\n            setCompShipCoordsArray(prevCompShipCoordsArray => {\n                return [...prevCompShipCoordsArray, coordsArray];\n            }); \n        }\n\n    }\n\n    const addShipOnBoard = (player,id) => {\n        if (player==='human'){\n            setShipOnBoard(prevShipOnBoard=>{\n                return [...prevShipOnBoard,id];\n            });\n        } else {\n            setCompShipOnBoard(prevShipOnBoard=>{\n                return [...prevShipOnBoard,id];\n            });\n        }\n    }\n\n    const handleStart = () => {\n        setGameStart(true);\n    }\n\n    useEffect(()=>{\n        updateStatus();\n    },[gameStart, winner]);\n\n    return (\n        <div id='gameContainer'>\n            <GameBoard \n                boardSize={boardSize}\n                player='human'\n                shipSizeArray={shipSizeArray}\n                addShipOnBoard={addShipOnBoard}\n                shipOnBoard={shipOnBoard}\n                gameStart={gameStart}\n                addShipCoordsArray={addShipCoordsArray}\n                shipCoordsArray={shipCoordsArray}\n                boardAttackCoords={boardAttackCoords}\n                addBoardAttackCoords={addBoardAttackCoords}\n                updateShipCoordsArray={updateShipCoordsArray}\n                shipSunk={shipSunk}\n                checkSink={checkSink}\n                checkWin={checkWin}\n                currPlayerTurn={currPlayerTurn}\n                updateTurn={updateTurn}\n                winner={winner}\n            />\n            <div id='gameStatusContainer'>\n                <div id='gameWinMessage'>{gameWin}</div>\n                <div id='statusMessage'>{status}</div>\n                <button\n                    className='btnStartGame'\n                    onClick={handleStart}\n                    disabled={(shipOnBoard.length===shipSizeArray.length && !gameStart) ? false:true}\n                >\n                    Start Game\n                </button>\n            </div>\n            \n            <GameBoard \n                boardSize={boardSize}\n                player='computer'\n                shipSizeArray={shipSizeArray}\n                addShipOnBoard={addShipOnBoard}\n                shipOnBoard={compShipOnBoard}\n                gameStart={gameStart}\n                addShipCoordsArray={addShipCoordsArray}\n                shipCoordsArray={compShipCoordsArray}\n                boardAttackCoords={compBoardAttackCoords}\n                addBoardAttackCoords={addBoardAttackCoords}\n                updateShipCoordsArray={updateShipCoordsArray}\n                shipSunk={compShipSunk}\n                checkSink={checkSink}\n                checkWin={checkWin}\n                currPlayerTurn={currPlayerTurn}\n                updateTurn={updateTurn}\n                winner={winner}\n            />\n        </div>\n    )\n}\n\nexport default GameController;","import React from 'react';\nimport Header from './Components/Header';\nimport GameController from './Components/GameController';\nimport './App.css'\n\nconst App = () => {\n  return (\n    <div id=\"appContainer\">\n      <Header/>\n      <GameController/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}